/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef OZWriteService_H
#define OZWriteService_H

#include <TProcessor.h>
#include "ozstore_types.h"

namespace ozstore {

class OZWriteServiceIf {
 public:
  virtual ~OZWriteServiceIf() {}
  virtual void put(const std::string& value) = 0;
  virtual void puts(const std::vector<std::string> & values) = 0;
};

class OZWriteServiceNull : virtual public OZWriteServiceIf {
 public:
  virtual ~OZWriteServiceNull() {}
  void put(const std::string& /* value */) {
    return;
  }
  void puts(const std::vector<std::string> & /* values */) {
    return;
  }
};

typedef struct _OZWriteService_put_args__isset {
  _OZWriteService_put_args__isset() : value(false) {}
  bool value;
} _OZWriteService_put_args__isset;

class OZWriteService_put_args {
 public:

  OZWriteService_put_args() : value("") {
  }

  virtual ~OZWriteService_put_args() throw() {}

  std::string value;

  _OZWriteService_put_args__isset __isset;

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const OZWriteService_put_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const OZWriteService_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OZWriteService_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OZWriteService_put_pargs {
 public:


  virtual ~OZWriteService_put_pargs() throw() {}

  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OZWriteService_put_result__isset {
  _OZWriteService_put_result__isset() : ouch(false) {}
  bool ouch;
} _OZWriteService_put_result__isset;

class OZWriteService_put_result {
 public:

  OZWriteService_put_result() {
  }

  virtual ~OZWriteService_put_result() throw() {}

  OZException ouch;

  _OZWriteService_put_result__isset __isset;

  void __set_ouch(const OZException& val) {
    ouch = val;
  }

  bool operator == (const OZWriteService_put_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const OZWriteService_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OZWriteService_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OZWriteService_put_presult__isset {
  _OZWriteService_put_presult__isset() : ouch(false) {}
  bool ouch;
} _OZWriteService_put_presult__isset;

class OZWriteService_put_presult {
 public:


  virtual ~OZWriteService_put_presult() throw() {}

  OZException ouch;

  _OZWriteService_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OZWriteService_puts_args__isset {
  _OZWriteService_puts_args__isset() : values(false) {}
  bool values;
} _OZWriteService_puts_args__isset;

class OZWriteService_puts_args {
 public:

  OZWriteService_puts_args() {
  }

  virtual ~OZWriteService_puts_args() throw() {}

  std::vector<std::string>  values;

  _OZWriteService_puts_args__isset __isset;

  void __set_values(const std::vector<std::string> & val) {
    values = val;
  }

  bool operator == (const OZWriteService_puts_args & rhs) const
  {
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const OZWriteService_puts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OZWriteService_puts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OZWriteService_puts_pargs {
 public:


  virtual ~OZWriteService_puts_pargs() throw() {}

  const std::vector<std::string> * values;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OZWriteService_puts_result__isset {
  _OZWriteService_puts_result__isset() : ouch(false) {}
  bool ouch;
} _OZWriteService_puts_result__isset;

class OZWriteService_puts_result {
 public:

  OZWriteService_puts_result() {
  }

  virtual ~OZWriteService_puts_result() throw() {}

  OZException ouch;

  _OZWriteService_puts_result__isset __isset;

  void __set_ouch(const OZException& val) {
    ouch = val;
  }

  bool operator == (const OZWriteService_puts_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const OZWriteService_puts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OZWriteService_puts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OZWriteService_puts_presult__isset {
  _OZWriteService_puts_presult__isset() : ouch(false) {}
  bool ouch;
} _OZWriteService_puts_presult__isset;

class OZWriteService_puts_presult {
 public:


  virtual ~OZWriteService_puts_presult() throw() {}

  OZException ouch;

  _OZWriteService_puts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class OZWriteServiceClient : virtual public OZWriteServiceIf {
 public:
  OZWriteServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  OZWriteServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void put(const std::string& value);
  void send_put(const std::string& value);
  void recv_put();
  void puts(const std::vector<std::string> & values);
  void send_puts(const std::vector<std::string> & values);
  void recv_puts();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class OZWriteServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<OZWriteServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (OZWriteServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_puts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  OZWriteServiceProcessor(boost::shared_ptr<OZWriteServiceIf> iface) :
    iface_(iface) {
    processMap_["put"] = &OZWriteServiceProcessor::process_put;
    processMap_["puts"] = &OZWriteServiceProcessor::process_puts;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~OZWriteServiceProcessor() {}
};

class OZWriteServiceMultiface : virtual public OZWriteServiceIf {
 public:
  OZWriteServiceMultiface(std::vector<boost::shared_ptr<OZWriteServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~OZWriteServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<OZWriteServiceIf> > ifaces_;
  OZWriteServiceMultiface() {}
  void add(boost::shared_ptr<OZWriteServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void put(const std::string& value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->put(value);
    }
  }

  void puts(const std::vector<std::string> & values) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->puts(values);
    }
  }

};

} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef OZTravService_H
#define OZTravService_H

#include <TProcessor.h>
#include "ozstore_types.h"

namespace ozstore {

class OZTravServiceIf {
 public:
  virtual ~OZTravServiceIf() {}
  virtual void next_kv(TravPair& _return, const int32_t cur) = 0;
};

class OZTravServiceNull : virtual public OZTravServiceIf {
 public:
  virtual ~OZTravServiceNull() {}
  void next_kv(TravPair& /* _return */, const int32_t /* cur */) {
    return;
  }
};

typedef struct _OZTravService_next_kv_args__isset {
  _OZTravService_next_kv_args__isset() : cur(false) {}
  bool cur;
} _OZTravService_next_kv_args__isset;

class OZTravService_next_kv_args {
 public:

  OZTravService_next_kv_args() : cur(0) {
  }

  virtual ~OZTravService_next_kv_args() throw() {}

  int32_t cur;

  _OZTravService_next_kv_args__isset __isset;

  void __set_cur(const int32_t val) {
    cur = val;
  }

  bool operator == (const OZTravService_next_kv_args & rhs) const
  {
    if (!(cur == rhs.cur))
      return false;
    return true;
  }
  bool operator != (const OZTravService_next_kv_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OZTravService_next_kv_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OZTravService_next_kv_pargs {
 public:


  virtual ~OZTravService_next_kv_pargs() throw() {}

  const int32_t* cur;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OZTravService_next_kv_result__isset {
  _OZTravService_next_kv_result__isset() : success(false) {}
  bool success;
} _OZTravService_next_kv_result__isset;

class OZTravService_next_kv_result {
 public:

  OZTravService_next_kv_result() {
  }

  virtual ~OZTravService_next_kv_result() throw() {}

  TravPair success;

  _OZTravService_next_kv_result__isset __isset;

  void __set_success(const TravPair& val) {
    success = val;
  }

  bool operator == (const OZTravService_next_kv_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const OZTravService_next_kv_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OZTravService_next_kv_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OZTravService_next_kv_presult__isset {
  _OZTravService_next_kv_presult__isset() : success(false) {}
  bool success;
} _OZTravService_next_kv_presult__isset;

class OZTravService_next_kv_presult {
 public:


  virtual ~OZTravService_next_kv_presult() throw() {}

  TravPair* success;

  _OZTravService_next_kv_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class OZTravServiceClient : virtual public OZTravServiceIf {
 public:
  OZTravServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  OZTravServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void next_kv(TravPair& _return, const int32_t cur);
  void send_next_kv(const int32_t cur);
  void recv_next_kv(TravPair& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class OZTravServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<OZTravServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (OZTravServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_next_kv(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  OZTravServiceProcessor(boost::shared_ptr<OZTravServiceIf> iface) :
    iface_(iface) {
    processMap_["next_kv"] = &OZTravServiceProcessor::process_next_kv;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~OZTravServiceProcessor() {}
};

class OZTravServiceMultiface : virtual public OZTravServiceIf {
 public:
  OZTravServiceMultiface(std::vector<boost::shared_ptr<OZTravServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~OZTravServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<OZTravServiceIf> > ifaces_;
  OZTravServiceMultiface() {}
  void add(boost::shared_ptr<OZTravServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void next_kv(TravPair& _return, const int32_t cur) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->next_kv(_return, cur);
        return;
      } else {
        ifaces_[i]->next_kv(_return, cur);
      }
    }
  }

};

} // namespace

#endif

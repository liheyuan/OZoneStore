/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef OZReadService_H
#define OZReadService_H

#include <TProcessor.h>
#include "ozstore_types.h"

namespace ozstore {

class OZReadServiceIf {
 public:
  virtual ~OZReadServiceIf() {}
  virtual void get(std::string& _return, const std::string& key) = 0;
  virtual void gets(std::vector<std::string> & _return, const std::vector<std::string> & keys) = 0;
};

class OZReadServiceNull : virtual public OZReadServiceIf {
 public:
  virtual ~OZReadServiceNull() {}
  void get(std::string& /* _return */, const std::string& /* key */) {
    return;
  }
  void gets(std::vector<std::string> & /* _return */, const std::vector<std::string> & /* keys */) {
    return;
  }
};

typedef struct _OZReadService_get_args__isset {
  _OZReadService_get_args__isset() : key(false) {}
  bool key;
} _OZReadService_get_args__isset;

class OZReadService_get_args {
 public:

  OZReadService_get_args() : key("") {
  }

  virtual ~OZReadService_get_args() throw() {}

  std::string key;

  _OZReadService_get_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const OZReadService_get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const OZReadService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OZReadService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OZReadService_get_pargs {
 public:


  virtual ~OZReadService_get_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OZReadService_get_result__isset {
  _OZReadService_get_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _OZReadService_get_result__isset;

class OZReadService_get_result {
 public:

  OZReadService_get_result() : success("") {
  }

  virtual ~OZReadService_get_result() throw() {}

  std::string success;
  OZException ouch;

  _OZReadService_get_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ouch(const OZException& val) {
    ouch = val;
  }

  bool operator == (const OZReadService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const OZReadService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OZReadService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OZReadService_get_presult__isset {
  _OZReadService_get_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _OZReadService_get_presult__isset;

class OZReadService_get_presult {
 public:


  virtual ~OZReadService_get_presult() throw() {}

  std::string* success;
  OZException ouch;

  _OZReadService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OZReadService_gets_args__isset {
  _OZReadService_gets_args__isset() : keys(false) {}
  bool keys;
} _OZReadService_gets_args__isset;

class OZReadService_gets_args {
 public:

  OZReadService_gets_args() {
  }

  virtual ~OZReadService_gets_args() throw() {}

  std::vector<std::string>  keys;

  _OZReadService_gets_args__isset __isset;

  void __set_keys(const std::vector<std::string> & val) {
    keys = val;
  }

  bool operator == (const OZReadService_gets_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const OZReadService_gets_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OZReadService_gets_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OZReadService_gets_pargs {
 public:


  virtual ~OZReadService_gets_pargs() throw() {}

  const std::vector<std::string> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OZReadService_gets_result__isset {
  _OZReadService_gets_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _OZReadService_gets_result__isset;

class OZReadService_gets_result {
 public:

  OZReadService_gets_result() {
  }

  virtual ~OZReadService_gets_result() throw() {}

  std::vector<std::string>  success;
  OZException ouch;

  _OZReadService_gets_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  void __set_ouch(const OZException& val) {
    ouch = val;
  }

  bool operator == (const OZReadService_gets_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const OZReadService_gets_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OZReadService_gets_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OZReadService_gets_presult__isset {
  _OZReadService_gets_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _OZReadService_gets_presult__isset;

class OZReadService_gets_presult {
 public:


  virtual ~OZReadService_gets_presult() throw() {}

  std::vector<std::string> * success;
  OZException ouch;

  _OZReadService_gets_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class OZReadServiceClient : virtual public OZReadServiceIf {
 public:
  OZReadServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  OZReadServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(std::string& _return, const std::string& key);
  void send_get(const std::string& key);
  void recv_get(std::string& _return);
  void gets(std::vector<std::string> & _return, const std::vector<std::string> & keys);
  void send_gets(const std::vector<std::string> & keys);
  void recv_gets(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class OZReadServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<OZReadServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (OZReadServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_gets(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  OZReadServiceProcessor(boost::shared_ptr<OZReadServiceIf> iface) :
    iface_(iface) {
    processMap_["get"] = &OZReadServiceProcessor::process_get;
    processMap_["gets"] = &OZReadServiceProcessor::process_gets;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~OZReadServiceProcessor() {}
};

class OZReadServiceMultiface : virtual public OZReadServiceIf {
 public:
  OZReadServiceMultiface(std::vector<boost::shared_ptr<OZReadServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~OZReadServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<OZReadServiceIf> > ifaces_;
  OZReadServiceMultiface() {}
  void add(boost::shared_ptr<OZReadServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get(std::string& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get(_return, key);
        return;
      } else {
        ifaces_[i]->get(_return, key);
      }
    }
  }

  void gets(std::vector<std::string> & _return, const std::vector<std::string> & keys) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->gets(_return, keys);
        return;
      } else {
        ifaces_[i]->gets(_return, keys);
      }
    }
  }

};

} // namespace

#endif
